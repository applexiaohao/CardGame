//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace AssemblyCSharp
{
  

    public class RX_CardManager  :MonoBehaviour
    {

        private static Vector3 btPos, rtPos, ltPos;

        #region Singleton
        private RX_CardManager()
        {
            btPos = GameObject.Find("Handed - bottom").GetComponent<UISprite>().transform.position;
            ltPos = GameObject.Find("Handed - left").GetComponent<UISprite>().transform.position;
            rtPos = GameObject.Find("Handed - right").GetComponent<UISprite>().transform.position;
        }
        private static RX_CardManager s_CardManager = null;
        public static RX_CardManager DefaultManager
        {
            get
            {
                if (s_CardManager == null)
                {
                    s_CardManager = new RX_CardManager();
                }
                return s_CardManager;
            }
        }
        #endregion

        // Get A New Card
        private List<int> GetNewCardList()
        {
            List<int> cl = new List<int>();

            for (int i = 0; i < RX_Define.RX_Card_Number; i++)
            {
                cl.Add(i);
            }

            return cl;
        }

        public List<RX_Card> Reshuffle()
        {
            // get a new card
            List<int> the_list = GetNewCardList();

            //create a shuffle card list
            List<RX_Card> res_list = new List<RX_Card>();

            for (int i = 0; i < RX_Define.RX_Card_Number; i++)
            {
                //create a random index within the_list
                int random_index = UnityEngine.Random.Range(0, the_list.Count);

                //take the random index value into res_list
                res_list.Add(new RX_Card(the_list[random_index]));

                //remove the random index value from the_list
                the_list.RemoveAt(random_index);
            }

            return res_list;

        }

        public static UISprite CreateSpriteBy(RX_Card card, UISprite parent, float x)
        {
            float y = card.PositionY;
            int depthNum = (int)x;
            if (parent.tag != "cbottom")
            {
                float temp = x;
                x = y;
                y = temp;

                depthNum = -depthNum;
            }

            //crate NGUI gameObject;	                    can create gameObject -----3
            UISprite sprite = NGUITools.AddChild<UISprite>(parent.gameObject);
            
            //add (widget size)'s collider
            //(if we want to add an interact function to the NGUI gameObjce,we must add collider fist!)
            NGUITools.AddWidgetCollider(sprite.gameObject);

            //only add Component(button) to interact,       not create gameObject -----1
            UIButton button = NGUITools.AddMissingComponent<UIButton>(sprite.gameObject);

            sprite.depth = depthNum + 300;
            sprite.atlas = RX_Resources.DefaultResources.Card_atlas;

            sprite.spriteName = card.ToString();

            sprite.SetRect(x, y, 52f, 70f);    //the card's size changed to original 's 25%

            button.onClick.Add(new EventDelegate(() =>
            {
                card.IsPop = !card.IsPop;
                if (parent.tag == "cleft")
                {
                    sprite.SetRect(card.PositionY, y, 52f, 70f);
                }
                else if (parent.tag == "cright")
                {
                    sprite.SetRect(card.PositionY * (-1), y, 52f, 70f);
                }
                else
                {
                    sprite.SetRect(x, card.PositionY, 52f, 70f);
                }    
            }));

            sprite.name = card.ToString();

            //add to the sprite pool for destroy
            Sprite_pool.Add(sprite);
            return sprite;
        }

        /// <summary>
        /// sprite pool for destroy all(to reshuffle)
        /// </summary>
        private static List<UISprite> sprite_pool = null;
        public static List<UISprite> Sprite_pool
        {
            get
            {
                if (sprite_pool == null)
                {
                    sprite_pool = new List<UISprite>();
                }
                return sprite_pool;
            }
        }

        //clear the pool
        public static void ClearPool()
        {
            sprite_pool = null;
        }

        //add to the current sprite pool for destroy
        public static void AddPool(UISprite[] willAdd)
        {
            foreach (UISprite adder in willAdd)
            {
               Sprite_pool.Add(adder);
            }
        }

        public static void RefreshPool()
        {
            for (int i = 0; i < Sprite_pool.Count; i++)
            {
                if (Sprite_pool[i] != null)
                {
                    UnityEngine.GameObject.Destroy(Sprite_pool[i].gameObject);
                }
            }
            Sprite_pool.RemoveRange(0, Sprite_pool.Count);
        }

        //each player previous handed cards 
        private static Dictionary<RX_SEAT_POSITION,List<UISprite>> handedSprites = null;
        public static Dictionary<RX_SEAT_POSITION, List<UISprite>> HandedSprites
        {
            get { 
                if (handedSprites == null)
                {
                    handedSprites = new Dictionary<RX_SEAT_POSITION, List<UISprite>>();
                }
                return handedSprites;
            }
        }

        public static void SetHandedSprites(RX_SEAT_POSITION setPos , List<UISprite> uiSprite)
        {
           if (! HandedSprites.ContainsKey(setPos))
           {
               handedSprites.Add(setPos, uiSprite);
           }
           else
           {
               foreach (UISprite item in HandedSprites[setPos])
               {
                   GameObject.Destroy(item);
               }
               HandedSprites[setPos] = uiSprite;
           }
            List<UISprite> valueList;
            if (handedSprites.TryGetValue(setPos, out valueList))
            {
                int count = valueList.Count;
                Vector3[] posList = new Vector3[count];
                Vector3 gap = new Vector3();
                switch (setPos)
                {
                    case RX_SEAT_POSITION.RX_SEAT_BOTTOM:
                        {
                            posList[count / 2] = GameObject.Find("Handed - bottom").transform.position; 
                            gap = Vector3.left * 0.05f;
                            break;
                        }
                    case RX_SEAT_POSITION.RX_SEAT_LEFT:
                        {
                            posList[count / 2] = GameObject.Find("Handed - left").transform.position;
                            gap = Vector3.down * 0.05f;
                            break;
                        }
                    case RX_SEAT_POSITION.RX_SEAT_RIGHT:
                        {
                            posList[count / 2] = GameObject.Find("Handed - right").transform.position;
                            gap = Vector3.down * 0.05f;
                            break;
                        }
                    default:
                        break;
                }

                for(int i = count / 2 - 1 ; i >= 0 ; i --)
                {
                    posList[i] = posList[i + 1] + gap;
                }
                for (int i = count / 2 + 1; i < count; i++)
                {
                    posList[i] = posList[i - 1] - gap;
                }
                for (int i = 0 ; i < count; i++)
                {
                    iTween.MoveTo(valueList[i].gameObject, posList[i], 1f);
                }
            }
        }



    }
}

