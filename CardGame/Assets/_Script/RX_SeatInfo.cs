//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharp
{
    public enum RX_ROLE_TYPE
    {
        RX_ROLE_DIZHU = 0,
        RX_ROLE_NONGMIN = 1,
        RX_ROLE_NORMAL = 2
    }
    public enum RX_SEAT_POSITION
    {
        RX_SEAT_BOTTOM = 0,
        RX_SEAT_LEFT = 1,
        RX_SEAT_RIGHT = 2
    }
    public class RX_SeatInfo
    {
        /// <summary>
        /// player role
        /// </summary>
        private RX_ROLE_TYPE seat_type;
        public RX_ROLE_TYPE Seat_type
        {
            get
            {
                return seat_type;
            }
            set
            {
                seat_type = value;
            }
        }

        /// <summary>
        /// seat position for tell us where did the poker place
        /// </summary>
        
        private RX_SEAT_POSITION seat_pos;
        public RX_SEAT_POSITION Seat_pos
        {
            get
            {
                return seat_pos;
            }
            set
            {
                seat_pos = value;
                switch (this.seat_pos)
                {
                    case RX_SEAT_POSITION.RX_SEAT_BOTTOM:
                        {
                            break;
                        }
                    case RX_SEAT_POSITION.RX_SEAT_LEFT:
                        {
                            break;
                        }
                    case RX_SEAT_POSITION.RX_SEAT_RIGHT:
                        {
                            break;
                        }
                    default:
                        break;
                }
            }
        }

        /// <summary>
        /// userName info for network
        /// </summary>
        private string seat_user;
        public string Seat_user
        {
            get { return seat_user; }
            set { seat_user = value; }
        }

        /// <summary>
        /// ui_pos, where should the poker spawn on the screen
        /// </summary>
        private Vector3 ui_pos;
        public Vector3 Ui_pos
        {
            get
            {
                return ui_pos;
            }
        }

        private UISprite seat_container;
        public UISprite Seat_container
        {
            get { return seat_container; }
        }
        public RX_SeatInfo(RX_SEAT_POSITION pos, UISprite pool)
        {
            this.Seat_type = RX_ROLE_TYPE.RX_ROLE_NORMAL;
            this.Seat_pos = pos;
            this.seat_container = pool;
            Seat_label = seat_container.GetComponentInChildren<UILabel>();
        }

        private UISprite handed_container;
        public UISprite Handed_container
        {
            get {
                return seat_container;
            }
            set
            {
                handed_container = value;
            }
        }

        private UILabel seat_label;
        public UILabel Seat_label
        {
            get {
                return seat_label; 
            }
            set {
                seat_label = value;
            }
        }

        public void SetLabel(int index, string info)
        {
            string[] temp = Seat_label.text.Split('-');
            temp[index] = info;
            Seat_label.text = temp[0] + "-" + temp[1];
        }

        /// <summary>
        /// the left card(after 'play a hand') in the hand.
        /// </summary>
        private List<RX_Card> card_list;
        public List<RX_Card> Card_list
        {
            get
            {
                return card_list;
            }
            set
            {
                card_list = value;
                //re layout
                this.LayoutCardList();
            }
        }

        void LayoutCardList()
        {
            this.Card_list.Sort((RX_Card x, RX_Card y) =>
            {
                return (int)y.Level - (int)x.Level;
            });
            
            RX_CardManager.RefreshPool();


            int width = Seat_pos == RX_SEAT_POSITION.RX_SEAT_BOTTOM ? this.seat_container.width : this.seat_container.height;
            int height = Seat_pos == RX_SEAT_POSITION.RX_SEAT_BOTTOM ? this.seat_container.height : this.seat_container.width;

            int margin = width / 23;
            int count = this.card_list.Count;

            int minx = 0 - count / 2 * margin;
            int temp = minx;    //start x position

            for (int i = 0; i < count; i++)
            {
                RX_CardManager.CreateSpriteBy(this.card_list[i], this.seat_container, temp);
                temp += margin;     //change x position to current
            }
        }

        public RX_CardSet PopCardSet()
        {
            //FindAll 需要传入一个谓词条件....
            List<RX_Card> list = this.Card_list.FindAll((RX_Card obj) => { return obj.IsPop; });
            //create a new cardSet,which player have selected
            RX_CardSet card_set = new RX_CardSet();
            card_set.Card_lister = list;

            //check the whether the cardSet is effect
            if (RX_CardType.IsBigBoom(card_set)||
                RX_CardType.IsBoom(card_set)||
                RX_CardType.IsDan(card_set)||
                RX_CardType.IsDui(card_set)||
                RX_CardType.IsFeijibudai(card_set)||
                RX_CardType.IsFeijidai(card_set)||
                RX_CardType.IsLianDui(card_set)||
                RX_CardType.IsSanBuDai(card_set)||
                RX_CardType.IsSandaiyi(card_set)||
                RX_CardType.IsShunzi(card_set)||
                RX_CardType.IsSidaier(card_set)
                )
            {

                //check can give a hand?
                if (RX_Manager.prevCardSet == null ||
                    (card_set.Card_lister.Count == RX_Manager.prevCardSet.Card_lister.Count && (int)card_set.Card_level > (int)RX_Manager.prevCardSet.Card_level && card_set.Card_type == RX_Manager.prevCardSet.Card_type)
                    || (card_set.Card_type == RX_CARD_SET.RX_TYPE_BOOM && RX_Manager.prevCardSet.Card_type != RX_CARD_SET.RX_TYPE_BOOM && RX_Manager.prevCardSet.Card_type != RX_CARD_SET.RX_TYPE_WANGZHA)
                    || card_set.Card_type == RX_CARD_SET.RX_TYPE_WANGZHA
                    )
                {
                    //clear previous spritePool and add the current cardsSprites to the pool
                    RX_CardManager.ClearPool();
                    UISprite[] sprites = seat_container.GetComponentsInChildren<UISprite>();
                    List<UISprite> param = new List<UISprite>();
                    for (int i = 0; i < sprites.Length ; i ++ )
                    {
                        foreach (RX_Card item in card_set.Card_lister)
                        {
                            if (item.ToString() == sprites[i].name)
                            {
                                //change the sprite's parent, prevent it been destroyed
                                sprites[i].transform.SetParent(GameObject.Find("Control - Handed").transform);
                                param.Add(sprites[i]);
                                sprites[i] = new UISprite();
                                break;
                            }
                        }
                    }
                    RX_CardManager.SetHandedSprites(seat_pos, param);
                    sprites[0] = null;
                    RX_CardManager.AddPool(sprites);

                    ////RemoveAll 需要传入一个谓词条件....instantiate new cards on the screen!
                    this.Card_list.RemoveAll((RX_Card obj) => { return obj.IsPop; });
                    //re layout after deleted the pop cards
                    this.LayoutCardList();
                    return card_set;
                }
                return null;
            }
            else
            {
                return null;
            }
        }

        public void ClearPopCard()
        {
            RX_CardManager.ClearPool();
            UISprite[] sprites = seat_container.GetComponentsInChildren<UISprite>();
            sprites[0] = null;
            RX_CardManager.AddPool(sprites);
            foreach (RX_Card card in Card_list)
            {
                card.IsPop = false;
            }
            LayoutCardList();
            LayoutCardList();
        }







    }
}

